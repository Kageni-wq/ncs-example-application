#include <zephyr/dt-bindings/led/led.h>

/ {
	chosen {
		nordic,nrf-spim = &spi4;
		nordic,nrf-uarte = &uart1;
		nordic,nrf-uart = &uart2;
		nordic,nrf-pwm = &pwm0;
	};

	/* Define the PWM LED properly */
	pwmleds {
		compatible = "pwm-leds";
		pwm_led0: pwm_led_0 {
			pwms = <&pwm0 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
		};
	};

	torch_led_switch {
		compatible = "gpio-leds";
		r_led: rled {
			gpios = <&gpio1 11 GPIO_ACTIVE_LOW>;
			label = "Power control for right torch led";
		};
		l_led: lled {
			gpios = <&gpio0 5 GPIO_ACTIVE_LOW>;
			label = "Power control for left torch led";
		};
	};

	rgb_pwr: rgb-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "rgb-pwr-ctrl";
        enable-gpios = <&gpio0 19 GPIO_ACTIVE_LOW>;
    };

	display_pwr: display-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "display-pwr-ctrl";
        enable-gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
    };

    dsp_pwr: dsp-pwr-ctrl {
        compatible = "regulator-fixed";
        regulator-name = "dsp-pwr-ctrl";
        enable-gpios = <&gpio1 10 GPIO_ACTIVE_LOW>;
    };

	navigation: navigation {
		compatible = "adc-keys";
		io-channels = <&adc 5>;
		keyup-threshold-mv = <3000>;

		key_up {
			press-thresholds-mv = <2900>, <3100>; /* DPAD_VOLTAGE_UP +/- tolerance */
			zephyr,code = <INPUT_KEY_UP>;
		};

		key_down {
			press-thresholds-mv = <2200>, <2400>; /* DPAD_VOLTAGE_DOWN +/- tolerance */
			zephyr,code = <INPUT_KEY_DOWN>;
		};

		key_left {
			press-thresholds-mv = <1500>, <1700>; /* DPAD_VOLTAGE_LEFT +/- tolerance */
			zephyr,code = <INPUT_KEY_LEFT>;
		};

		key_right {
			press-thresholds-mv = <800>, <1000>; /* DPAD_VOLTAGE_RIGHT +/- tolerance */
			zephyr,code = <INPUT_KEY_RIGHT>;
		};

		key_center {
			press-thresholds-mv = <400>, <600>; /* DPAD_VOLTAGE_CENTER +/- tolerance */
			zephyr,code = <INPUT_KEY_ENTER>;
		};
	};

	buttons: buttons {
		compatible = "gpio-keys";

		button0: button_0 {
			gpios = <&gpio0 23 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button 1";
			zephyr,code = <INPUT_KEY_KP0>;
		};

		button1: button_1 {
			gpios = <&gpio0 24 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button 2";
			zephyr,code = <INPUT_KEY_KP1>;
		};

		button2: button_2 {
			gpios = <&gpio0 8 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button 3";
			zephyr,code = <INPUT_KEY_2>;
		};

		button3: button_3 {
			gpios = <&gpio0 9 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button 4";
			zephyr,code = <INPUT_KEY_3>;
		};
	};

	longpress: longpress {
		input = <&buttons>;
		compatible = "zephyr,input-longpress";
		input-codes = <INPUT_KEY_KP0>, <INPUT_KEY_KP1>;
		short-codes = <INPUT_KEY_0>, <INPUT_KEY_1>;
		long-codes = <INPUT_KEY_Y>, <INPUT_KEY_X>;
		long-delay-ms = <1000>;
	};
};

&pinctrl {
	uart2_default: uart2_default {
		group1 {
			psels = <NRF_PSEL(UART_TX, 1, 1)>,
					<NRF_PSEL(UART_RTS, 0, 11)>;
		};

		group2 {
			psels = <NRF_PSEL(UART_RX, 1, 0)>,
					<NRF_PSEL(UART_CTS, 0, 10)>;
			bias-pull-up;
		};
	};
	uart2_sleep: uart2_sleep {
		group1 {
			psels = <NRF_PSEL(UART_TX, 1, 1)>,
			        <NRF_PSEL(UART_RX, 1, 0)>,
			        <NRF_PSEL(UART_RTS, 0, 11)>,
			        <NRF_PSEL(UART_CTS, 0, 10)>;
			low-power-enable;
		};
	};

	pwm0_default_custom: pwm0_default_custom {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 26)>;
			nordic,invert;
		};
	};
	pwm0_sleep: pwm0_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 26)>;
			low-power-enable;
		};
	};
};

&pwm0 {
	pinctrl-0 = <&pwm0_default_custom>;
	pinctrl-1 = <&pwm0_sleep>;
	pinctrl-names = "default", "sleep";
};

&uart2 {
	status = "okay";
	current-speed = <115200>;
	pinctrl-0 = <&uart2_default>;
	pinctrl-1 = <&uart2_sleep>;
	pinctrl-names = "default", "sleep";
};

&spi4 {
	compatible = "nordic,nrf-spim";

	pinctrl-0 = <&spi4_default>;
	pinctrl-1 = <&spi4_sleep>;
	pinctrl-names = "default", "sleep";
	status = "okay";

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <5250000>;

		/* WS2812 */
		chain-length = <10>; /* LED strip length */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
		color-mapping = <LED_COLOR_ID_GREEN
		LED_COLOR_ID_RED
		LED_COLOR_ID_BLUE>;
	};
};

&adc {
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	channel@5 {
		reg = <0>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_VDD_1";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
		zephyr,input-positive = <NRF_SAADC_AIN5>;
		zephyr,resolution = <12>;
		zephyr,oversampling = <8>;
	};
};

&i2c3 {
	npm1300_pmic: pmic@6b {
		compatible = "nordic,npm1300";
		reg = <0x6b>;
		host-int-gpios = <&gpio1 6 GPIO_ACTIVE_HIGH>;
		pmic-int-pin	= <4>;

		npm1300_gpio: gpio-controller {
			compatible = "nordic,npm1300-gpio";
			gpio-controller;
			#gpio-cells = <2>;
			ngpios = <5>;
		};

		npm1300_regulators: regulators {
			compatible = "nordic,npm1300-regulator";

			npm1300_buck1: BUCK1 {
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			regulator_btm: BUCK2 {
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-init-microvolt = <3300000>;
			};

			regulator_3v3: LDO1 {
				status = "disabled";
			};

			// LDO2 is not used
			npm1300_ldo2: LDO2 {
				status = "disabled";
			};
		};

		npm1300_charger: charger {
			compatible = "nordic,npm1300-charger";
			term-microvolt = <4400000>;
			term-warm-microvolt = <4000000>;
			current-microamp = <200000>; // 0.2C CC (constant current) charge to 4.4V,
			term-current-percent = <10>; // then 4.4V CV(constant voltage) charge till charge current decline to â‰¤ 0.02C
			dischg-limit-microamp = <1000000>;
			vbus-limit-microamp = <500000>;
			thermistor-ohms = <10000>; // Not used
			thermistor-beta = <3380>; // Not used
			charging-enable;
		};

		npm1300_buttons: buttons {
			compatible = "gpio-keys";
			status = "disabled";
		};
	};
};


/ {
	aliases {
		led-strip = &led_strip;
		uart1 = &uart1;
		uart2 = &uart2;
		right-led = &r_led;
		left-led = &l_led;
		sw-right = &button0;
		sw-left = &button1;
		nav-up = &button2;
		nav-down = &button3;
		torch-pwm = &torch_pwm;
	};
};
